h1. payment4j

An abstraction layer over various payment services like Paypal, AuthorizeNet, Stripe... payment4j allows you to create a shopping site without the heavy part of dealing with a custom API.

h2. Usage

Simple purchase
<pre lang="java"><code>
CreditCard creditCard = new CreditCard().setNumber("4007000000027")
		.setType(CreditCardType.VISA).setFirstName("John")
		.setLastName("Doe").setMonth(12).setYear(2015)
		.setVerificationValue("000");

AuthorizeNetGateway
		.build(true, "authorizenet.apiLoginId","authorizenet.transactionKey").
			transactionGateway()
				.purchase(Money.of(CurrencyUnit.EUR, 10), creditCard);
</pre></code>

Recurring
<pre lang="java"><code>
CreditCard creditCard = new CreditCard().setNumber("4007000000027")
		.setType(CreditCardType.VISA).setFirstName("John")
		.setLastName("Doe").setMonth(12).setYear(2015)
		.setVerificationValue("000");

Schedule schedule = new Schedule();
schedule.setEach(ScheduleUnit.MONTH);
schedule.setTotalOccurences(3);

AuthorizeNetGateway
	.build(true, "authorizenet.apiLoginId","authorizenet.transactionKey")
		.recurringGateway()
			.recurring(Money.of(CurrencyUnit.EUR, 10), creditCard, schedule);
</pre></code>

h2. API

Each provider gateway can expose one or more gateways:

|_. Gateway     |_.  Features       |
| TransactionGateway         | Basic features: purchase, cancel, authorize, refund, credit              |
| RecurringGateway         | Reccuring payment              |
| HistoryGateway         | View the last transaction, query and list transactions              |
| CreditCardStoreGateway         | Manage credit card on a provider for your customers |

h2. Integrations

|_. Provider     |_.  Progession       |
| Paypal         | 30%              |
| AuthorizeNet         | 50%              |
| Stripe         | 30%              |
| Litle         | 10%              |
| BrainTree  | 10%              |
| PayBox  | 0%              |

h2. Build the project

<pre>
mvn clean install -DskipTests
</pre>

(Yeah, all tests are not fixed yet...)

h2. Testing

Since we need some accounts for testing and we can't expose them in public, you have to create a properties file in src/main/test named "accounts.properties". A template is already present in the folder, just remane it "accouts.properties" and fill the blank inside.

<pre>
# BrainTree
braintree.merchantId=xxxxx
braintree.publicKey=xxxxx
braintree.privateKey=xxxxx
			
# AuthorizeNet 
authorizenet.apiLoginId=xxxxx
authorizenet.transactionKey=xxxxx
</pre>
